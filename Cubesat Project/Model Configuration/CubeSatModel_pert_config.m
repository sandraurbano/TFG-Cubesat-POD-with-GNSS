
% CUBESAT MODEL WITH PERTURBATIONS CONFIGURATION FILE
% This file aims to define the parameters needed for the simulink 
% CubeSatModel_pert.slx. This model simulates QBITO 2U cubesat.

% Thesis Title: GNSS-Based Navigation Method for POD in CubeSats
% AUTHOR: Sandra Urbano Rodriguez
% DATE: June, 2024

clc; clear; close all; 

% Simulink model name
mission.mdl = "CubeSatModel_pert";

%% CENTRAL BODY: EARTH
% Define central body parameters
Earth.mu = 3.986*10^14;      % [m^3/s^2]
Earth.radius = 6378*10^3;    % [m]

%% CUBESAT: QBITO 

% Define Keplerian orbital elements
% QB50 orbit
mission.CubeSat.Altitude         = 330*10^3;
mission.CubeSat.SemiMajorAxis    = Earth.radius + mission.CubeSat.Altitude; % [m]
mission.CubeSat.Eccentricity     = 0; % [-]
mission.CubeSat.Inclination      = 79; % [deg]
mission.CubeSat.RAAN             = 250;  % [deg]
mission.CubeSat.ArgOfPeriapsis   = 0; % [deg]
mission.CubeSat.TrueAnomaly      = 35; % [deg]

% ISS orbit
% mission.CubeSat.Altitude         = 417*10^3;
% mission.CubeSat.SemiMajorAxis    = Earth.radius + mission.CubeSat.Altitude; % [m]
% mission.CubeSat.Eccentricity     = 0.0004413; % [-]
% mission.CubeSat.Inclination      = 51.6479; % [deg]
% mission.CubeSat.RAAN             = 109.5258;  % [deg]
% mission.CubeSat.ArgOfPeriapsis   = 103.0788; % [deg]
% mission.CubeSat.TrueAnomaly      = 31.6858; % [deg]

% Define cubesat physical parameters
mission.CubeSat.m  = 2;        % [kg]
mission.CubeSat.A  = 0.01667;  % [m2]
mission.CubeSat.I  = eye(3);   % [kg/m2]

%% SIMULATION
% Define StartDate and time of duration for the simulation
mission.StartDate = datetime(2014, 6, 15, 01, 05, 35); 
mission.Period    = 2*pi*sqrt(mission.CubeSat.SemiMajorAxis^3/Earth.mu); 
mission.Duration  = hours(24);
mission.EndDate   = mission.StartDate + mission.Duration;
mission.Timestep  = 0.5;

% Open simulaiton
open_system(mission.mdl);

%% SPACECRAFT DYNAMICS BLOCK
% Define the path to the Spacecraft dynamics block in the model.
mission.CubeSat.Dynamicsblk = mission.mdl + "/Spacecraft Dynamics";

% Define main properties
set_param(mission.CubeSat.Dynamicsblk, ...
    forcesin     = "off", ...
    momentsIn    = "on",...
    accelIn      = "off",...
    accelFrame   = "Fixed-frame",...
    outportFrame = "Fixed-frame",...
    outputAccel  = "on", ...
    startDate    = num2str(juliandate(mission.StartDate)), ...
    dateOut      = "on", ...
    action       = "Warning");

% Define mass properties
set_param(mission.CubeSat.Dynamicsblk, ...
    massType = "Fixed", ...
    mass     = "mission.CubeSat.m",...
    inertia  = "mission.CubeSat.I");

% Define orbit properties
set_param(mission.CubeSat.Dynamicsblk, ...
    stateFormatNum   = "Orbital elements",...
    orbitType        = "Keplerian", ...
    semiMajorAxis    = "mission.CubeSat.SemiMajorAxis", ...
    eccentricity     = "mission.CubeSat.Eccentricity", ...
    inclination      = "mission.CubeSat.Inclination", ...
    raan             = "mission.CubeSat.RAAN", ...
    argPeriapsis     = "mission.CubeSat.ArgOfPeriapsis", ...
    trueAnomaly      = "mission.CubeSat.TrueAnomaly");

% Define atittude properties
set_param(mission.CubeSat.Dynamicsblk, ...
    attitudeFrame   = "ICRF",...
    attitudeFormat  = "Quaternion",...
    attitude        = "[1 0 0 0]",...
    rotationOrder   = "ZYX",...
    attitudeRate    = "[0, 0, 0]",...
    outputAngAccel  = "on",...
    useGravGrad     = "on");

% Define central body properties
set_param(mission.CubeSat.Dynamicsblk, ...
    centralBody     = "Earth",...
    gravityModel    = "Spherical harmonics",...
    earthSH         = "EGM2008",...
    shDegree        = "120", ...
    useEOPs         = "on",...
    eopFile         = "aeroiersdata.mat",...
    outputTransform = "on");

% Define drag properties
set_param(mission.CubeSat.Dynamicsblk, ...
    useDrag                   = "off",...
    atmosSrc                  = "Dialog",...
    atmosModel                = "NRLMSISE-00", ...
    fluxSrc                   = "Dialog",...
    SpaceWeatherDataFile      = "aeroSpaceWeatherData.mat", ...
    F107ExtrapMethod          = "None - clip",...
    MagneticIndexExtrapMethod = "None - clip",...
    fluxFlagsSrc              = "Dialog",...
    fluxFlags                 = "ones(1,23)",...
    useOxygen                 = "on", ...
    dragCoeffSrc              = "Dialog",...
    dragCoeff                 = '2.179',...
    dragAreaSrc               = "Dialog",...
    dragArea                  = "mission.CubeSat.A");

% Define thrid-body properties
set_param(mission.CubeSat.Dynamicsblk, ...
    ephemerisModel        = "DE405", ...
    useEphemerisDateRange = "on", ...
    ephemerisstartDate  = "juliandate(2010, 1, 1)", ...
    ephemerisEndDate    = "juliandate(2030, 1, 1)", ...
    useThirdBodyGravity = "off",...
    includeSunGravity   = "off",...
    includeMoonGravity  = "off");

% Define solar radiation properties
set_param(mission.CubeSat.Dynamicsblk, ...
    useSRP               = "off",...
    eclipseFractionSrc   = "Dialog",...
    shadowModel          = "Dual cone",...
    reflectivityCoeffSrc = "Dialog",...
    reflectivityCoeff    = "1.8",...
    srpAreaSrc           = "Dialog",...
    srpArea              = "mission.CubeSat.A",...
    fluxPressure         = "4.5344321e-6");

% Define units
set_param(mission.CubeSat.Dynamicsblk, ...
    units      = "Metric (m/s)",...
    angleUnits = "Degrees",...
    timeFormat = "Julian Date");

%% ATTITUDE PROFILE BLOCK
% Define the path to the Attitude Profile block in the model.
mission.CubeSat.Attitudeblk = mission.mdl + "/Attitude Profile (NADIR Pointing)";

% Define parameters
set_param(mission.CubeSat.Attitudeblk, ...
    outputError             = "on",...
    outputFinalAttitude     = "off",...
    portFrame               = "Fixed-Frame",...
    pointingMode            = "Point at nadir",...
    tunablePointing         = "off",...
    primaryAlignmentSrc     = "Dialog",...
    primaryAlignment        = "[0 0 1]",...
    secondaryAlignmentSrc   = "Dialog",...
    secondaryAlignment      = "[0 1 0]",...
    constraintFrame         = "ICRF",...
    secondaryConstraintSrc  = "Dialog",...
    secondaryConstraint     = "[0 0 1]");

%% PROPAGATOR 
% Define propagator properties
set_param(mission.mdl, ...
    SolverType = "Fixed-step", ...
    FixedStep  = string(mission.Timestep),...
    RelTol     = "1e-6", ...
    AbsTol     = "1e-7", ...
    StopTime   = string(seconds(mission.Duration)));

%% SIMULATION OUTPUT
% Define otuput properties
set_param(mission.mdl, ...
    SaveOutput          = "on", ...
    OutputSaveName      = "yout", ...
    SaveFormat          = "Dataset",...
    DatasetSignalFormat = "timeseries");

% Define output paths
Resultspath = 'Data/ModelComparison/';
filename_output    = "SimOutput_QB50_nopert_final.mat";
filename_spirent   = "PosVelECEF_ISS_final.txt";
filepath_output = fullfile(Resultspath,filename_output);
filepath_spirent = fullfile(Resultspath,filename_spirent);

%% RUN SIMULATION AND SAVE DATA
% Run the Model and Collect CubeSat Ephemerides
mission.SimOutput = sim(mission.mdl);
save(filepath_output,'mission');

% Create a txt with simulator output data for Spirent
spirent(mission,filepath_spirent);
disp('Spirent data saved')



